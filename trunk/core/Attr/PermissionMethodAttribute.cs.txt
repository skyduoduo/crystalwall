using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PostSharp.Aspects;

namespace CrystalWall.Attr
{
    /// <summary>
    /// 需要权限控制的方法必须使用此元注释标记，使用此元注释标记在方法上，他将获取方法上配置的
    /// PermissionPointAttribute，并使用配置的decider运行方法前首先进行权限判断
    /// </summary>
    [AttributeUsage(AttributeTargets.Method)]
    public class PermissionMethodAttribute : OnMethodBoundaryAspect
    {
        private string deciderType;

        public string DeciderType
        {
            get { return deciderType; }
            set { deciderType = value; }
        }


        private class ConstPointProvider : IPermissionPointProvider
        {
            private PermissionPoint[] points;

            public ConstPointProvider(PermissionPoint[] points)
            {
                this.points = points;
            }

            public PermissionPoint[] GetPoint()
            {
                return points;
            }
        }

        public override void OnEntry(MethodExecutionArgs args)
        {
            PermissionPointAttribute[] attrs = (PermissionPointAttribute[])args.Method.GetCustomAttributes(typeof(PermissionPointAttribute), true);
            if (attrs == null || attrs.Length == 0)
                return;
            PermissionPoint[] points = new PermissionPoint[attrs.Length]; 
            int i = 0;
            foreach (PermissionPointAttribute attr in attrs)
            {
                Type t = Type.GetType(attr.Type);
                PermissionPoint point = (PermissionPoint)t.GetConstructor(new Type[0]).Invoke(new object[0]);
                point.Name = attr.Name;
                point.Resource = attr.Resource;
                point.Action = attr.Action;
                point.Context = args.Instance;
                point.Member = args.Method;
                point.Args = args.Arguments.ToArray();
                points[i++] = point;
            }
            IAccessDecider decider;
            if (deciderType == null || deciderType.Equals(string.Empty))
                decider = new Decider();//使用默认的权限决定器
            else 
            {
                decider = (IAccessDecider)Type.GetType(deciderType).GetConstructor(new Type[0]).Invoke(new object[0]);
            }
            decider.Decide(PrincipalTokenHolder.CurrentPrincipal, new ConstPointProvider(points));
        }
    }
}
