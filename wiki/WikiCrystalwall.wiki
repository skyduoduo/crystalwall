#labels 开发者指南,基本概念
<h2><span style="font-size: 16pt;">权限系统组成</span></h2><p><span style="font-size: 10.5pt;">对于任何一个权限系统来说，基本上都分为两个部分。</span></p><ul><li><span style="font-size: 14px;">认证：对用户所声称的身份进行合法性验证。</span></li><li><span style="font-size: 14px;">授权：对用户声称的身份能够访问的资源进行控制</span></li></ul><p><span style="font-size: 10.5pt;">在CrystalWall&nbsp;V1.0版本中不包含认证部分。1.0版本仅仅针对授权进行开发。</span></p><h2><span style="font-size: 16pt;">权限</span></h2><p><span style="font-size: 10.5pt;">权限是一个非常广泛的概念，什么是权限？权限有非常繁多的种类，例如：admin用户能访问数据库，论坛匿名用户不能发帖等等。总体上来说，权限就是对系统中某一种资源进行的访问。</span></p><p><span style="font-size: 10.5pt;">对于这种访问，CrystalWall权限系统使用抽象类PermissionInfo类表示。每一种权限都具有一个名称和一个动作字符表示。名称和动作的具体含义有PermissionInfo的具体实现类决定。例如，你可以设计一个PagePermissionInfo类表示对html网页的权限，他的name名称为网页的虚拟路径，action动作为browser浏览等。</span></p><p><span style="font-size: 10.5pt;">对于一个身份来说，一般不会仅仅具有一个或一种权限。例如网站管理员具有上传图片的权限，也具有删帖的权限等。那么如果表示一个身份所具有的所有权限呢？在CrystalWall系统中，使用了一个叫PermissionInfoCollection的类来表示一个身份具有的&ldquo;权限集&rdquo;。一个权限集一般包含同种类型的许多权限。当然，你也可以实现自己的子类以包含多种不同类型的权限。</span></p><p><span style="font-size: 10.5pt;">有了权限和权限集的概念，那么如何才能判断一个身份能够访问某种资源呢？这个问题相当简单，一个身份具有一个PermissionInfoCollection，而对某种资源的访问，CrystalWall使用PermissionInfo表示，那么要判断身份是否能够访问某种资源，只需要判断身份具有的权限集PermissionInfoCollection是否包含要访问的资源所代表的PermissionInfo即可。</span></p><p><span style="font-size: 10.5pt;">因此，CrystalWall权限系统在PermissionInfoCollection类中设计了一个Contains方法用于判断权限集是否包含某个权限。如果包含，表示此身份允许对PermissionInfo所代表的资源进行&ldquo;某种&rdquo;访问，如果不包含，则表示身份没有得到&ldquo;授权&rdquo;不允许访问资源。</span></p><h2><span style="font-size: 16pt;">PermissionInfo<span style="font-family: 黑体;">类</span></span></h2><p><span style="font-size: 10.5pt;">这个类是CrystalWall权限系统的核心类。通过以上分析，PermissionInfo封装了对某种资源的某种访问。实际上，这种&ldquo;访问&rdquo;也具有相关的关系！</span></p><p><span style="font-size: 10.5pt;">例如：对磁盘上某个文件进行的&ldquo;编辑&rdquo;操作，就隐含表示了对这个文件可以进行&ldquo;读取查看&rdquo;操作，而对这个文件的&rdquo;删除&ldquo;操作，就不一定包含&rdquo;读取&ldquo;操作。为了表示这种在权限之间的&rdquo;包含关系&ldquo;，PermissionInfo类中也具有一个方法：Contains。但这个方法是抽象的，需要开发者根据具体的权限类自己进行扩充。</span></p><p><span style="font-size: 10.5pt;">&nbsp;注意：在CrystalWall权限系统中并没有运用Composite模式使得PermissionInfoCollection继承自PermissionInfo，因为我们认为在行为上，权限集与权限已经表现的不尽相同了。记住：一个权限集并不是一个权限，PermissionInfoCollection与PermissionInfo并不是面向对象中所说的&ldquo;is&nbsp;a"关系。</span></p><h2><span>正向和负向权限</span></h2><p><span style="font-size: 10.5pt;">涉及到权限概念，就必然涉及到正向和负向权限的问题。所谓正向和负向权限，类似于我们日常所说的&ldquo;授予某人能够访问某种资源&ldquo;和&rdquo;拒绝某人访问某种资源&ldquo;的关系。例如，你可以授予管理员访问磁盘文件的权限，但拒绝匿名用户访问磁盘文件的权限。不幸的是，如果在一个权限系统中同时包含正向和负向的权限，系统将会产生严重的冲突。例如：对某人授予某个文件编辑的权限，但是又对某人拒绝对此文件查看的权限，此时由于编辑文件权限又包含查看权限，那么对此用户是能够编辑文件还是不能编辑文件呢？这就是同时具有正向和负向权限必然导致的一个冲突！</span></p><p><span style="font-size: 10.5pt;">对于这种冲突，crystalwall系统依照惯例优先原则：不建议使用负向权限。即CrystalWall系统中的PermissionInfo类不处理负向权限，他只表示对某个资源&rdquo;授予&ldquo;权限，而没有&rdquo;拒绝&ldquo;的权限！由于PermissionInfo只是单一方向的授予权限，因此crystalwall完全避免了正负向权限的冲突！</span></p><p><span style="font-size: 10.5pt;">对于PermissionInfoCollection权限集来说，默认的处理方式是：如果其中有一个权限包含指定权限，则整个权限集包含此权限！默认情况下，PermissionInfoCollection也始终贯彻了惯例优先原则----使用单向权限！但是，由于实际情况下在人们的概念中的确存在&rdquo;拒绝&ldquo;的权限，因此，crystalwall系统也不随意&rdquo;拒绝此种实际的思维模式&ldquo;。crystalwall在PermissionInfoCollection中加入了一个Elect委托，这个委托是&rdquo;选举&ldquo;的含义，你可以把权限集看成是一个议会，其中的某个权限是一个议员，一个议员包含某种权限表示此议员投了赞成票，而其他议员不包含，则表示此议员投了反对票。此时，crystalwall使用Elect委托来决定权限集是否包含此权限。例如，你可以加入一个少数服从多数委托，当权限集中多数&rdquo;议员&ldquo;投反对票时，表示此权限集不包含此权限！</span></p><p><span style="font-size: 10.5pt;">虽然crystalwall使用elect委托这种折中的办法解决正负权限冲突的问题，但是crystalwall强烈建议开发者使用单一的正向权限，这样将会使你的开发工作变的更加方便。</span></p>