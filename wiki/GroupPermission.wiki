#labels 组织机构,团队权限,组权限,树状权限,组织内资源,.NET权限框架,Csharp权限框架,权限框架,权限系统,.NET权限,Csharp权限,权限,开源权限,开源权限框架,.NET开源权限框架
=crystalwall对组织机构树权限的处理=

任何组织都具有树状结构，例如： 

集团公司 
{{{
   --**省分公司

     --销售部

       --销售总监

       --业务员

     --财务部

       --财务总监

       --会计

       --出纳

     --生产部

       --车间主任

  --**省分公司

     --销售部

       --销售总监

       --业务员

     --财务部

       --财务总监

       --会计

       --出纳

     --生产部

       --车间主任
}}}
对于这样的组织机构中创建的资源如何进行权限管理呢？Crystalwall设计了FilePermissionInfo类来处理这个问题。

Crystalwall中，认为所有的资源都是“文件”，每一个文件都具有一个路径，所有的资源都必须在根目录“/"之下。例如一个可执行文件：/xyz/mn/p.exe它在/xyz/mn目录之下，/xyz/mn/p.exe为文件的路径。

Crystalwall使用匹配的方式来匹配文件的路径，在crystalwall中可以使用通配符"?"表示匹配任意单个字符，“*”表示匹配任意多个字符，"**"表示匹配任意的目录，例如，/xyz/**/*.exe匹配/xyz/mn/p.exe，也匹配/xyz/mn/pqr/p.exe但不匹配/xyz/xx/m.txt

同时，在FilePermissionInfo中还具有动作的概念，FilePermissionInfo中的动作分为4种：创建、读取、写入、运行。分别使用字符串"crwx"表示，这4位的字符串每一个位都表示是否具有此动作权限，如果不具有，则使用"-"表示，例如:"c-w-"表示具有创建和写入权限，但不具有读取和运行权限。

使用了”路径“和动作两个概念，FilePermissionInfo能够很好的解决组织机构树中资源权限的问题：

如果某个用户具有权限：FilePermissionInfo，其路径为"/xyz/**/*.exe"，动作为”crwx"则当访问组织机构树种某个节点中的某个资源时，例如：
{{{
Xyz

  --mn

   --pq

     --tt.exe

     --aa.txt
}}}
的tt.exe资源时，crystalwall则判断当前用户的FilePermissionInfo是否匹配路径/xyz/mn/pq/tt.exe，然后在根据应用本身的业务规则判断施加在tt.exe上的动作，如果具有此权限，则允许执行，否则抛出权限异常。

上例中，很显然/xyz/**/*.exe是匹配/xyz/mn/pq/tt.exe的，但不匹配/xyz/mn/pq/tt.txt，因此，当前用户能够对/xyz/mn/pq/tt.exe资源进行相关操作，而/xyz/mn/pq/tt.txt则不允许！